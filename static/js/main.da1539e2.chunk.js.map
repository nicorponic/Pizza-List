{"version":3,"sources":["components/PizzaList.js","components/PizzaListContainer.js","components/PizzaDetails.js","components/PizzaDetailsContainer.js","App.js","serviceWorker.js","reducers/reducer.js","reducers/selected-pizza.js","reducers/index.js","store.js","index.js"],"names":["PizzaList","props","react","pizzas","map","pizza","key","id","onClick","selectPizza","name","PizzaListContainer","_this","dispatch","type","payload","this","React","connect","state","PizzaDetails","description","ingredients","ingredient","PizzaDetailsContainer","console","log","selectedPizza","find","App","react_default","a","createElement","className","components_PizzaListContainer","components_PizzaDetailsContainer","Component","Boolean","window","location","hostname","match","reducer","arguments","length","undefined","action","combineReducers","enhancer","__REDUX_DEVTOOLS_EXTENSION__","store","createStore","ReactDOM","render","es","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"oQAEe,SAASA,EAAUC,GAChC,OACEC,EAAA,yBACEA,EAAA,0CACAA,EAAA,wBACGD,EAAME,OAAOC,IAAI,SAAAC,GAAK,OACrBH,EAAA,oBAAII,IAAKD,EAAME,GAAIC,QAAS,kBAAMP,EAAMQ,YAAYJ,EAAME,MACvDF,EAAMK,qBCLbC,6MACJF,YAAc,SAAAF,GACZK,EAAKX,MAAMY,SAAS,CAClBC,KAAM,eACNC,QAASR,6EAKX,OACEL,EAAA,cAACF,EAAD,CAAWG,OAAQa,KAAKf,MAAME,OAAQM,YAAaO,KAAKP,qBAV7BQ,aAqBlBC,cANS,SAAAC,GACtB,MAAO,CACLhB,OAAQgB,EAAMhB,SAIHe,CAAyBP,GCvBzB,SAASS,EAAanB,GACnC,IAAMI,EAAQJ,EAAMI,MACpB,OACEH,EAAA,yBACEA,EAAA,wBAAKG,EAAMK,MAEXR,EAAA,uBACEA,EAAA,uBAAIG,EAAMgB,cAGZnB,EAAA,wBACGG,EAAMiB,YAAYlB,IAAI,SAAAmB,GAAU,OAC/BrB,EAAA,oBAAII,IAAKiB,GAAaA,WCV1BC,mLAEAC,QAAQC,IAAIV,KAAKf,OACnB,IAAMI,EAAQW,KAAKf,MAAMI,MACzB,OAAKA,EAEEH,EAAA,cAACkB,EAAD,CAAcf,MAAOA,IAFT,YAJaY,aAmBrBC,cATS,SAAAC,GACtB,OAA4B,OAAxBA,EAAMQ,cACD,CACLtB,MAAOc,EAAMhB,OAAOyB,KAAK,SAAAvB,GAAK,OAAIA,EAAME,KAAOY,EAAMQ,iBAGlD,IAGMT,CAAyBM,GCNzBK,mLATX,OACEC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAACE,EAAD,MACAJ,EAAAC,EAAAC,cAACG,EAAD,cALUC,aCMEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,sECSSC,EA3BC,WAA6BC,UAAAC,OAAA,QAAAC,IAAAF,UAAA,IAAAA,UAAA,IAAAA,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAP,IACrB7B,KAsBX,MApBqB,CACnB,CACEP,GAAI,EACJG,KAAM,kBACNW,YAAa,qBACbC,YAAa,CAAC,SAAU,YAAa,UAEvC,CACEf,GAAI,EACJG,KAAM,mBACNW,YAAa,qCACbC,YAAa,CAAC,SAAU,cAE1B,CACEf,GAAI,EACJG,KAAM,eACNW,YAAa,wBACbC,YAAa,CAAC,YAAa,OAAQ,eCX9BoB,EATC,WAA+B,IAA9BvB,EAA8BwB,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAtB,KAAMG,EAAgBH,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAP,GACtC,OAAQG,EAAOhC,MACb,IAAK,eACH,OAAOgC,EAAO/B,QAChB,QACE,OAAOI,ICDE4B,cAAgB,CAC7B5C,SACAwB,kBCHIqB,EACJV,OAAOW,8BAAgCX,OAAOW,+BAIjCC,EAFDC,YAAYT,EAASM,GCEnCI,IAASC,OACPvB,EAAAC,EAAAC,cAACsB,EAAA,EAAD,CAAUJ,MAAOA,GACfpB,EAAAC,EAAAC,cAACuB,EAAD,OAEFC,SAASC,eAAe,SLqHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.da1539e2.chunk.js","sourcesContent":["import * as React from \"react\";\n\nexport default function PizzaList(props) {\n  return (\n    <div>\n      <h1>Pizza Explorer</h1>\n      <ul>\n        {props.pizzas.map(pizza => (\n          <li key={pizza.id} onClick={() => props.selectPizza(pizza.id)}>\n            {pizza.name}\n          </li>\n        ))}\n      </ul>\n    </div>\n  );\n}\n","import * as React from \"react\";\nimport PizzaList from \"./PizzaList\";\nimport { connect } from \"react-redux\";\n\nclass PizzaListContainer extends React.Component {\n  selectPizza = id => {\n    this.props.dispatch({\n      type: \"SELECT_PIZZA\",\n      payload: id\n    });\n  };\n\n  render() {\n    return (\n      <PizzaList pizzas={this.props.pizzas} selectPizza={this.selectPizza} />\n    );\n  }\n}\n\nconst mapStateToProps = state => {\n  return {\n    pizzas: state.pizzas\n  };\n};\n\nexport default connect(mapStateToProps)(PizzaListContainer);\n","import * as React from \"react\";\n\nexport default function PizzaDetails(props) {\n  const pizza = props.pizza;\n  return (\n    <div>\n      <h2>{pizza.name}</h2>\n\n      <p>\n        <i>{pizza.description}</i>\n      </p>\n\n      <ul>\n        {pizza.ingredients.map(ingredient => (\n          <li key={ingredient}>{ingredient}</li>\n        ))}\n      </ul>\n    </div>\n  );\n}\n","import * as React from \"react\";\nimport { connect } from \"react-redux\";\nimport PizzaDetails from \"./PizzaDetails\";\n\nclass PizzaDetailsContainer extends React.Component {\n  render() {\n      console.log(this.props)\n    const pizza = this.props.pizza;\n    if (!pizza) return null;\n\n    return <PizzaDetails pizza={pizza} />;\n  }\n}\n\nconst mapStateToProps = state => {\n  if (state.selectedPizza !== null) {\n    return {\n      pizza: state.pizzas.find(pizza => pizza.id === state.selectedPizza)\n    };\n  }\n  return {};\n};\n\nexport default connect(mapStateToProps)(PizzaDetailsContainer);\n","import React, { Component } from \"react\";\n//import logo from './logo.svg';\nimport \"./App.css\";\nimport PizzaListContainer from \"./components/PizzaListContainer\";\nimport PizzaDetailsContainer from \"./components/PizzaDetailsContainer\";\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <PizzaListContainer />\n        <PizzaDetailsContainer />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","const reducer = (state = [], action = {}) => {\n  switch (action.type) {\n    default:\n      const initialState = [\n        {\n          id: 1,\n          name: \"Pizza Margarita\",\n          description: \"Minimalism is key!\",\n          ingredients: [\"tomato\", \"mozarella\", \"basil\"]\n        },\n        {\n          id: 2,\n          name: \"Pizza Napoletana\",\n          description: \"The mafia knows whats best for you\",\n          ingredients: [\"tomato\", \"mozarella\"]\n        },\n        {\n          id: 3,\n          name: \"Pizza Bianca\",\n          description: \"Did somebody say oil?\",\n          ingredients: [\"olive oil\", \"salt\", \"rosemary\"]\n        }\n      ];\n      return initialState;\n  }\n};\n\nexport default reducer;\n","const reducer = (state = null, action = {}) => {\n  switch (action.type) {\n    case \"SELECT_PIZZA\":\n      return action.payload;\n    default:\n      return state;\n  }\n};\n\nexport default reducer;\n","import { combineReducers } from \"redux\";\nimport pizzas from \"./reducer\";\nimport selectedPizza from \"./selected-pizza\";\n\nexport default combineReducers({\n  pizzas,\n  selectedPizza\n});\n","import { createStore } from \"redux\";\nimport reducer from \"./reducers\";\n\nconst enhancer =\n  window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__();\n\nconst store = createStore(reducer, enhancer);\n\nexport default store;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport store from \"./store\";\nimport { Provider } from \"react-redux\";\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}